name: Frontend CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/**/package-lock.json') }}

      - name: Install dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run lint
        working-directory: starter/frontend
        run: npm run lint

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/**/package-lock.json') }}

      - name: Install dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run tests
        working-directory: starter/frontend
        run: npm run test

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/**/package-lock.json') }}

      - name: Install dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Build and run frontend container
        working-directory: starter/frontend
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .

  login-to-ecr:
    runs-on: ubuntu-latest

    steps:
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

  push-to-ecr:
    needs: login-to-ecr
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Push Docker image to ECR
        working-directory: starter/frontend
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag $ECR_REGISTRY/mp-frontend:latest .
          docker push $ECR_REGISTRY/mp-frontend:latest

  deploy-to-cluster:
    needs: push-to-ecr
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Deploy application using kubectl
        run: |
          cd starter/backend/k8s
          aws eks update-kubeconfig --name udacity-frontend
          kustomize edit set image frontend=$ECR_REGISTRY/mp-frontend:latest
          kustomize build | kubectl apply -f -
